import{o as s,c as n,a}from"./app.195cd2ac.js";const t='{"title":"Home","description":"","frontmatter":{"home":true,"heroText":"schauspiel","tagline":"e2e browser testing based on playwright and folio"},"headers":[{"level":2,"title":"Playwright","slug":"playwright"},{"level":2,"title":"Cypress","slug":"cypress"},{"level":3,"title":"Reliance on JS-injections","slug":"reliance-on-js-injections"},{"level":3,"title":"Own async-to-sync API","slug":"own-async-to-sync-api"},{"level":3,"title":"Browser Support","slug":"browser-support"},{"level":3,"title":"Assorted Nitpicks","slug":"assorted-nitpicks"}],"relativePath":"index.md","lastUpdated":1613999638577}',e={},o=a('<h1 id="goals-and-design"><a class="header-anchor" href="#goals-and-design" aria-hidden="true">#</a> Goals and Design</h1><p>Schauspiel wants to enable you to write tests like this:</p><div class="language-js"><pre><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;checkout&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should sucessfully checkout&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.some .selector&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;typing some text&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span>should<span class="token punctuation">.</span>not<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">class</span><span class="token punctuation">(</span><span class="token string">&#39;empty&#39;</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.non-existing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">exist</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Schauspiel aims to:</p><ul><li>provide a chaining syntax based on native async/await</li><li>use modern browser automation for all browsers via <a href="https://playwright.dev/" target="_blank" rel="noopener noreferrer">playwright</a></li><li>auto-retrying everything</li><li>a fixture based test runner thanks to <a href="https://github.com/microsoft/folio" target="_blank" rel="noopener noreferrer">folio</a></li></ul><p>Schauspiel achieves this with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener noreferrer">proxies</a>. Lots and lots of proxies.</p><h1 id="differences-to-other-tools"><a class="header-anchor" href="#differences-to-other-tools" aria-hidden="true">#</a> Differences to other tools</h1><h2 id="playwright"><a class="header-anchor" href="#playwright" aria-hidden="true">#</a> Playwright</h2><p><strong>Schauspiel</strong> builds heavily upon playwright and extends it with a more compact syntax. Instead of handling all the promises yourself in playwright like this:</p><div class="language-js"><pre><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">&#39;.some-selector&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> element<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> element<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>\n<span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">await</span> element<span class="token punctuation">.</span><span class="token function">textContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringContaining</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>schauspiel allows you to write chained commands and assertions, removing the need for a lot of local variables:</p><div class="language-js"><pre><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.some-selector&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span>contain<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>Schauspiel also auto-retries assertions and provides more assertions specifically for DOM elements.</p><h2 id="cypress"><a class="header-anchor" href="#cypress" aria-hidden="true">#</a> Cypress</h2><p>Cypress is a clear inspiration for <strong>schauspiel</strong> and while Cypress remains a great and polished tool for e2e testing, it has some big caveats.</p><h3 id="reliance-on-js-injections"><a class="header-anchor" href="#reliance-on-js-injections" aria-hidden="true">#</a> Reliance on JS-injections</h3><p>Instead of controlling the browser via an automation API (like playwright does), Cypress injects javascript into the pages it tests. This has some rather big shortcomings, chief of which is that <em>all</em> events are simulated inside javascript and thus only approximate real browser behavior. One consequence of this is <a href="https://github.com/cypress-io/cypress/issues/10" target="_blank" rel="noopener noreferrer">missing hover support</a>.</p><h3 id="own-async-to-sync-api"><a class="header-anchor" href="#own-async-to-sync-api" aria-hidden="true">#</a> Own async-to-sync API</h3><p>Testing in the browser is inherently asynchronous. Waiting for pages to load, elements to exist and assertion conditions to be true need to all be handled. While playwright leaves this completely to the test author (resulting in <em>a lot</em> of <code>await</code>), Cypress completely hides this asynchronicity and presents the test author with a synchronous API, which, on first glance, is awesome. However, this forcing of asynchronous into synchronous call chains makes controlling the test flow (for <a href="https://docs.cypress.io/guides/core-concepts/conditional-testing.html" target="_blank" rel="noopener noreferrer">conditional testing</a> for example) difficult (<a href="https://docs.cypress.io/api/commands/then.html" target="_blank" rel="noopener noreferrer">fallbacks</a> exist) and some parts of Cypress&#39; API a bit <a href="https://docs.cypress.io/api/commands/its.html" target="_blank" rel="noopener noreferrer">bizarre</a>.</p><p><strong>Schauspiel</strong> instead relies on native Promises and Proxies, letting the test author write standard js.</p><h3 id="browser-support"><a class="header-anchor" href="#browser-support" aria-hidden="true">#</a> Browser Support</h3><p>Cypress just added Firefox support and still does not support Safari, which makes its use as a cross platform testing tool severely limited.</p><h3 id="assorted-nitpicks"><a class="header-anchor" href="#assorted-nitpicks" aria-hidden="true">#</a> Assorted Nitpicks</h3><p>From an outside perspective it looks like Cypress development is not fixing core problems but expanding into new use cases (with Cypress Studio for example). Some long time problems I have while writing cypress tests are in no particular order:</p><ul><li>each test suite is a separate test run</li><li>no way to stop on error in interactive mode</li><li>iframes are complicated™</li><li>weird <code>should(&#39;have.class&#39;, &#39;myclass&#39;)</code> syntax</li><li>no window/tab support</li></ul><h1 id="planned-features"><a class="header-anchor" href="#planned-features" aria-hidden="true">#</a> Planned Features</h1><ul><li>config file with base url, viewport, etc</li><li>commands ?</li><li>debug printing steps</li><li>catch browser exceptions</li><li>network blacklist</li><li>stay open on error: currently needs patch for folio</li></ul>',27);e.render=function(a,t,e,p,i,c){return s(),n("div",null,[o])};export default e;export{t as __pageData};
